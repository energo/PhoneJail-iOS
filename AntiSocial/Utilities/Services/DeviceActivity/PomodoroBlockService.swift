//
//  PomodoroBlockService.swift
//  AntiSocial
//
//  Created by D C on 28.08.2025.
//


import Foundation
import Combine
import ManagedSettings
import FamilyControls
import BackgroundTasks
import UserNotifications
import UIKit

final class PomodoroBlockService: ObservableObject {
  static let shared = PomodoroBlockService()
  private init() { restoreIfNeeded() }
  
  // MARK: - Public state
  @Published private(set) var isActive: Bool = false
  @Published private(set) var remainingSeconds: Int = 0
  @Published private(set) var isPaused: Bool = false
  // Whether current session should actually block apps
  private var isBlockingApps: Bool = true

  // MARK: - Internals
  private let store = ManagedSettingsStore(named: .pomodoro)
  private var ticker: AnyCancellable?
  private let defaultsKey = "pomodoro.unlockDate"
  
  // Pause state
  private var pausedAt: Date?
  private var originalUnlockDate: Date?
  
  // MARK: - API
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–º–æ–¥–æ—Ä–æ-—Å–µ—Å—Å–∏—é –Ω–∞ N –º–∏–Ω—É—Ç. –ï—Å–ª–∏ blockApps=false ‚Äî —Ç–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
  func start(minutes: Int, isStrictBlock: Bool = false, selectionActivity: FamilyActivitySelection, blockApps: Bool = true) {
    let m = max(1, minutes)
    let unlockDate = Date().addingTimeInterval(TimeInterval(m * 60))
    SharedData.userDefaults?.set(unlockDate.timeIntervalSince1970, forKey: defaultsKey)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏)
    if let data = try? JSONEncoder().encode(selectionActivity) {
      SharedData.userDefaults?.set(data, forKey: "pomodoroSelectedApps")
    }
    SharedData.userDefaults?.set(isStrictBlock, forKey: "pomodoroIsStrictBlock")
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ DeviceActivityMonitor (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏—Ç/—Å–Ω–∏–º–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    isBlockingApps = blockApps
    if blockApps {
      DeviceActivityScheduleService.setPomodoroSchedule(endAt: unlockDate)
    }
    
    // –¢–∏–∫–µ—Ä –¥–ª—è UI + –∞–≤—Ç–æ-—Å–Ω—è—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    startTicker(unlockDate: unlockDate)
    
    isActive = true
  }
  
  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é. completed=true ‚Äî —Å—á–∏—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π (—Ñ–æ–∫—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω).
  func stop(completed: Bool = false) {
    print("üçÖ PomodoroBlockService: stop() called, isActive was \(isActive)")
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    DeviceActivityScheduleService.stopPomodoroSchedule()
    ShieldService.shared.stopAppRestrictions(storeName: .pomodoro)
    SharedData.userDefaults?.removeObject(forKey: defaultsKey)
    ticker?.cancel()
    
    isActive = false
    remainingSeconds = 0
    isPaused = false
    pausedAt = nil
    originalUnlockDate = nil
    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    Task { @MainActor in
      AppBlockingLogger.shared.endSession(type: .appBlocking, completed: completed)
    }
    print("üçÖ PomodoroBlockService: stop() completed, isActive now \(isActive)")
  }
  
  /// –°—Ç–∞–≤–∏—Ç —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑—É
  func pause() {
    guard isActive && !isPaused else { return }
    print("üçÖ PomodoroBlockService: pause() called")
    
    isPaused = true
    pausedAt = Date()
    originalUnlockDate = savedUnlockDate()
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä
    ticker?.cancel()
  }
  
  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
  func resume() {
    guard isActive && isPaused else { return }
    print("üçÖ PomodoroBlockService: resume() called")
    
    guard let pausedAt = pausedAt,
          let originalUnlock = originalUnlockDate else { return }
    
    // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ –≤ –ø–∞—É–∑–µ
    let pauseDuration = Date().timeIntervalSince(pausedAt)
    let newUnlockDate = originalUnlock.addingTimeInterval(pauseDuration)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    SharedData.userDefaults?.set(newUnlockDate.timeIntervalSince1970, forKey: defaultsKey)
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∏–∫–µ—Ä
    startTicker(unlockDate: newUnlockDate)
    
    // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
    if isBlockingApps {
      DeviceActivityScheduleService.stopPomodoroSchedule()
      DeviceActivityScheduleService.setPomodoroSchedule(endAt: newUnlockDate)
    }
    
    isPaused = false
    self.pausedAt = nil
    self.originalUnlockDate = nil
  }
  
  /// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –í–°–ï–• –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  func emergencyClearAllBlocks() {
    
    // –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ stores
    let appBlockingStore = ManagedSettingsStore(named: .appBlocking)
    appBlockingStore.shield.applications = []
    appBlockingStore.shield.applicationCategories = nil
    appBlockingStore.shield.webDomains = []
    appBlockingStore.shield.webDomainCategories = nil
    
    let interruptionStore = ManagedSettingsStore(named: .interruption)
    interruptionStore.shield.applications = []
    interruptionStore.shield.applicationCategories = nil
    interruptionStore.shield.webDomains = []
    interruptionStore.shield.webDomainCategories = nil
    
    // –û—á–∏—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π store
    let defaultStore = ManagedSettingsStore()
    defaultStore.shield.applications = []
    defaultStore.shield.applicationCategories = nil
    defaultStore.shield.webDomains = []
    defaultStore.shield.webDomainCategories = nil
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ SharedData
    SharedData.userDefaults?.removeObject(forKey: defaultsKey)
    SharedData.userDefaults?.removeObject(forKey: SharedData.Widget.isBlocked)
    SharedData.userDefaults?.removeObject(forKey: SharedData.AppBlocking.unlockDate)
    SharedData.userDefaults?.set(false, forKey: SharedData.Widget.isBlocked)
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    ticker?.cancel()
    isActive = false
    remainingSeconds = 0
        
    ShieldService.shared.stopAppRestrictions()
    DeviceActivityScheduleService.stopSchedule()

    print("üö® Emergency clear: All blocks removed")
  }
    
  // MARK: - Helpers
  private func startTicker(unlockDate: Date) {
    ticker?.cancel()
    ticker = Timer
      .publish(every: 1, on: .main, in: .common)
      .autoconnect()
      .sink { [weak self] now in
        guard let self else { return }
        let left = Int(unlockDate.timeIntervalSince(now))
        self.remainingSeconds = max(0, left)
        if left <= 0 {
          print("üçÖ PomodoroBlockService: Timer reached 0, calling stop()")
          self.stop(completed: true) // —Å–Ω–∏–º–µ—Ç —â–∏—Ç –∏ –ø–æ—á–∏—Å—Ç–∏—Ç —Å—Ç–µ–π—Ç
        }
      }
  }
  
  private func restoreIfNeeded() {
    
    guard let unlock = savedUnlockDate() else { return }
    if Date() < unlock {
      // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∏ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–∫–µ—Ä. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–¥–Ω–∏–º–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.
      startTicker(unlockDate: unlock)
      isActive = true
    } else {
      // Session expired, stop
      stop()
    }
  }
  
  private func savedUnlockDate() -> Date? {
    guard let ts = SharedData.userDefaults?.double(forKey: defaultsKey),
          ts > 0
    else {
      return nil
    }
    
    return Date(timeIntervalSince1970: ts)
  }
}
