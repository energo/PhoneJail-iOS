import DeviceActivity
import SwiftUI

struct StatsActivityReport: DeviceActivityReportScene {
  let context: DeviceActivityReport.Context = .statsActivity
  let content: (StatsData) -> StatsSectionView
  
  func makeConfiguration(representing data: DeviceActivityResults<DeviceActivityData>) async -> StatsData {
    var sessions: [AppUsageSession] = []
    var reportDate: Date? = nil
    
    // Calculate total duration correctly - same as TotalActivityReport
    let totalDuration = await data.flatMap { $0.activitySegments }.reduce(0) {
      $0 + $1.totalActivityDuration
    }
    
    for await d in data {
      for await segment in d.activitySegments {
        // Use segment's actual date interval if available
        let segmentInterval = segment.dateInterval
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        if reportDate == nil {
          reportDate = segmentInterval.start
        }
        
        for await category in segment.categories {
          for await app in category.applications {
            let duration = app.totalActivityDuration
            guard duration > 0 else { continue }
            guard let token = app.application.token else { continue }
            let appName = app.application.localizedDisplayName ?? "App"
            
            // –í–ê–ñ–ù–û: DeviceActivity API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            // –¢–æ–ª—å–∫–æ –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–º–µ–Ω—Ç. –ú—ã –Ω–µ –º–æ–∂–µ–º –∑–Ω–∞—Ç—å —Ç–æ—á–Ω—ã–µ —á–∞—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
            // –ü–æ—ç—Ç–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –ø–µ—Ä–∏–æ–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
            
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ –≤—Å–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
            // –≠—Ç–æ –¥–∞—Å—Ç –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º
            let segmentDuration = segmentInterval.duration
            let segmentHours = segmentDuration / 3600.0 // —á–∞—Å—ã –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
            
            // –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ä—Ç–∞—Ö
            // –†–∞–∑–º–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É —Å–µ–≥–º–µ–Ω—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            let session = AppUsageSession(
              token: token,
              appName: appName,
              start: segmentInterval.start,
              end: segmentInterval.end, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–µ—Ü —Å–µ–≥–º–µ–Ω—Ç–∞
              duration: duration
            )
            
            sessions.append(session)
          }
        }
      }
    }
    
    let chartData = generateChartBars(from: sessions, reportDate: reportDate ?? Date())
    
    // Calculate focused duration from chart data (convert minutes to seconds)
    let focusedDuration = chartData.reduce(0.0) { $0 + Double($1.focusedMinutes * 60) }
    
    // Calculate distracted duration from chart data (convert minutes to seconds)
    // Distracted time is independent from focused time!
    let distractedDuration = chartData.reduce(0.0) { $0 + Double($1.distractedMinutes * 60) }
    
    // DEBUG: –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    print("üìä Stats Debug: totalDuration=\(totalDuration)s (\(totalDuration/3600)h)")
    print("üìä Stats Debug: focusedDuration=\(focusedDuration)s (\(focusedDuration/3600)h)")
    print("üìä Stats Debug: distractedDuration=\(distractedDuration)s (\(distractedDuration/3600)h)")
    
    // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç 24 —á–∞—Å–æ–≤
    let totalSeconds: TimeInterval = 86400
    let focusedPercent = Int((focusedDuration / totalSeconds) * 100)
    let distractedPercent = Int((distractedDuration / totalSeconds) * 100)
    let offlinePercent = 100 - focusedPercent - distractedPercent
    
    print("üìä Stats Debug: Percentages from 24h:")
    print("üìä Stats Debug: focused=\(focusedPercent)%, distracted=\(distractedPercent)%, offline=\(offlinePercent)%")
    print("üìä Stats Debug: Total should be 100%: \(focusedPercent + distractedPercent + offlinePercent)%")
    
    let top3AppUsages = topAppUsages(from: sessions, count: 3)
    
    var filledChartData = chartData
    for hour in 0..<filledChartData.count {
      let total = filledChartData[hour].totalMinutes
      filledChartData[hour].offlineMinutes = max(0, 60 - total)
    }
    
    return StatsData(
      totalDuration: totalDuration,  // Now using correct total from segments
      chartData: filledChartData,
      focusedDuration: focusedDuration,
      distractedDuration: distractedDuration,
      appUsages: top3AppUsages,
      appSessions: sessions
    )
  }
  
  func generateChartBars(from sessions: [AppUsageSession], reportDate: Date) -> [ChartBar] {
      var hourly = Array(repeating: (focused: 0.0, distracted: 0.0), count: 24)
      let calendar = Calendar.current
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞
      let chartDate = calendar.startOfDay(for: reportDate)
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
      let blockingSessions = SharedData.getBlockingSessions(for: chartDate)
      
      // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
      print("üìä Chart Debug: App usage sessions count: \(sessions.count)")
      print("üìä Chart Debug: Blocking sessions count: \(blockingSessions.count)")
      

      for session in sessions {
          // session.duration - —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          // session.start –∏ session.end - –ø–µ—Ä–∏–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞ (–Ω–µ —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
          
          // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç
          let segmentDuration = session.end.timeIntervalSince(session.start)
          let segmentHours = segmentDuration / 3600.0
          
          // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —á–∞—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
          var t1 = session.start
          let t2 = session.end
          var remainingDuration = session.duration

          while t1 < t2 && remainingDuration > 0 {
              // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
              let hour = calendar.dateComponents(in: TimeZone.current, from: t1).hour ?? 0

              // –ì—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
              guard let hourStart = calendar.dateInterval(of: .hour, for: t1) else { break }
              let hourEnd = hourStart.end

              // –û–±—Ä–µ–∑–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —É—Ö–æ–¥–∏—Ç –∑–∞ —ç—Ç–æ—Ç —á–∞—Å
              let intervalEnd = min(hourEnd, t2)
              let intervalDuration = intervalEnd.timeIntervalSince(t1)
              
              // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–æ–ª—é –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
              let proportionalMinutes: Double
              if segmentDuration > 0 {
                  // –î–æ–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç –æ–±—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                  let proportion = intervalDuration / segmentDuration
                  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –¥–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                  proportionalMinutes = (session.duration * proportion) / 60.0
              } else {
                  proportionalMinutes = 0
              }

              // –ö–ª–∞–¥—ë–º –≤ —Ç–µ–∫—É—â–∏–π –±–∞—Ä
              if hour >= 0 && hour < 24 {
                  hourly[hour].distracted += proportionalMinutes
              }

              // –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
              t1 = intervalEnd
          }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º focused time –∏–∑ —Å–µ—Å—Å–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      for session in blockingSessions {
          let startTime = session.startTime
          let endTime = session.endTime ?? Date()
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω–µ–º
          let dayStart = calendar.startOfDay(for: chartDate)
          let dayEnd = calendar.date(byAdding: .day, value: 1, to: dayStart) ?? chartDate
          
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è –∏–ª–∏ –Ω–∞—á–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –¥–Ω—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if endTime <= dayStart || startTime >= dayEnd {
              continue
          }
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ —Ä–∞–º–∫–∞–º–∏ –¥–Ω—è
          let sessionStart = max(startTime, dayStart)
          let sessionEnd = min(endTime, dayEnd)
          
          // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –ø–æ —á–∞—Å–∞–º
          var currentTime = sessionStart
          while currentTime < sessionEnd {
              let hour = calendar.component(.hour, from: currentTime)
              
              // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
              var components = calendar.dateComponents([.year, .month, .day, .hour], from: currentTime)
              components.hour = hour + 1
              components.minute = 0
              components.second = 0
              let nextHour = calendar.date(from: components) ?? currentTime
              
              let intervalEnd = min(nextHour, sessionEnd)
              
              let minutes = intervalEnd.timeIntervalSince(currentTime) / 60.0
              
              if hour >= 0 && hour < 24 {
                  // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º focused –≤—Ä–µ–º—è
                  // –ù–ï –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ distracted - –æ–Ω–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
                  hourly[hour].focused += minutes
              }
              
              currentTime = intervalEnd
          }
      }

      // DEBUG: –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∏ –≤—ã–≤–µ–¥–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
      let totalDistractedMinutes = hourly.reduce(0) { $0 + $1.distracted }
      let totalFocusedMinutes = hourly.reduce(0) { $0 + $1.focused }
      print("üìä Chart Debug: Total distracted minutes: \(totalDistractedMinutes) (\(totalDistractedMinutes/60)h \(Int(totalDistractedMinutes) % 60)m)")
      print("üìä Chart Debug: Total focused minutes: \(totalFocusedMinutes) (\(totalFocusedMinutes/60)h \(Int(totalFocusedMinutes) % 60)m)")
      
      // DEBUG: –ü–æ–∫–∞–∂–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º
      for hour in 0..<24 {
          if hourly[hour].distracted > 0 || hourly[hour].focused > 0 {
              print("üìä Hour \(hour): distracted=\(hourly[hour].distracted)m, focused=\(hourly[hour].focused)m")
          }
      }
      
      return (0..<24).map { hour in
          // –í–ê–ñ–ù–û: –í –æ–¥–Ω–æ–º —á–∞—Å–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 60 –º–∏–Ω—É—Ç!
          // –ï—Å–ª–∏ focused –∏ distracted –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è, –∏—Ö —Å—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 60
          let focusedMins = Int(hourly[hour].focused.rounded())
          let distractedMins = Int(hourly[hour].distracted.rounded())
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º 60 –º–∏–Ω—É—Ç–∞–º–∏
          let finalFocused = min(focusedMins, 60)
          let finalDistracted = min(distractedMins, 60)
          
          // –ï—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 60, –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å
          // –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ focused –∏ distracted –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
          let total = finalFocused + finalDistracted
          if total > 60 && total > 0 {
              // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
              let scale = 60.0 / Double(total)
              return ChartBar(
                  hour: hour,
                  focusedMinutes: Int(Double(finalFocused) * scale),
                  distractedMinutes: Int(Double(finalDistracted) * scale)
              )
          }
          
          return ChartBar(
              hour: hour,
              focusedMinutes: finalFocused,
              distractedMinutes: finalDistracted
          )
      }
  }
  
  /// Top-N –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ usage
  func topAppUsages(from sessions: [AppUsageSession], count: Int = 3) -> [AppUsage] {
    let grouped = Dictionary(grouping: sessions, by: { $0.token })
    return grouped
      .map { (token, sess) in
        AppUsage(
          name: sess.first?.appName ?? "App",
          token: token,
          usage: sess.reduce(0) { $0 + $1.duration }
        )
      }
      .sorted { $0.usage > $1.usage }
      .prefix(count)
      .map { $0 }
  }
  
  /// –†–∞—Å—á—ë—Ç offline –º–∏–Ω—É—Ç (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  private func calculateOfflineMinutes(for chartData: inout [ChartBar]) {
    for hour in 0..<24 {
      let hourSeconds = 60.0 * 60.0
      let distracted = TimeInterval(chartData[hour].distractedMinutes * 60)
      let focused = TimeInterval(chartData[hour].focusedMinutes * 60)
      let totalOnline = focused + distracted
      let offline = max(0, hourSeconds - totalOnline)
      chartData[hour].offlineMinutes = Int(offline / 60)
    }
  }
}

